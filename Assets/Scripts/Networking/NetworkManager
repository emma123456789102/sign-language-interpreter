using System.Collections;
using UnityEngine;
using UnityEngine.Networking;

public class NetworkManager : MonoBehaviour
{
    private const string RasaEndpoint = // update this when you know what the RASA location is ready
    private const int MaxRetries = 3; // the maximum number of retries for sending data
    private const float RetryDelay = 2f; // this is the delay between retries in seconds (here as a just in case)

    public void SendData(byte[] data)
    {
        StartCoroutine(SendDataCoroutine(data, 0));
    }

    private IEnumerator SendDataCoroutine(byte[] data, int attempt)
    {
        // this creates a form to send the data
        WWWForm form = new WWWForm();
        form.AddBinaryData("image", data, "captured_image.png", "image/png");

        using (UnityWebRequest www = UnityWebRequest.Post(RasaEndpoint, form))
        {
            yield return www.SendWebRequest();

            if (www.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError($"Error sending data to Rasa: {www.error}");

                // this retrys the logic
                if (attempt < MaxRetries)
                {
                    Debug.Log($"Retrying... Attempt {attempt + 1}/{MaxRetries}");
                    yield return new WaitForSeconds(RetryDelay);
                    StartCoroutine(SendDataCoroutine(data, attempt + 1)); // retrys sending the data
                }
                else
                {
                    Debug.LogError("Max retry attempts reached. Data not sent.");
                }
            }
            else
            {
                Debug.Log("Data sent to Rasa successfully.");
                // handling the response from RASA if it is needed
                string response = www.downloadHandler.text;
                ProcessRasaResponse(response);
            }
        }
    }

    private void ProcessRasaResponse(string response)
    {
        // processing the response from RASA
        Debug.Log($"Rasa Response: {response}");
        // You can parse the response and update your UI or game state accordingly
    }
}
