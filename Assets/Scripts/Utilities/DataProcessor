using UnityEngine;

public static class DataProcessor
{
    public static byte[] ConvertTextureToByteArray(Texture2D texture, bool useJpeg = false, int jpegQuality = 75)
    {
        if (texture == null)
        {
            Debug.LogError("Texture is null. Cannot convert to byte array.");
            return null;
        }

        byte[] imageData;

        if (useJpeg)
        {
            // encoding the texture to JPEG format with (randomly because I was not able to run this without the rest of the project) specified quality
            imageData = texture.EncodeToJPG(jpegQuality);
        }
        else
        {
            // this encodes the texture into a PNG format
            imageData = texture.EncodeToPNG();
        }

        return imageData;
    }

    public static Texture2D ResizeTexture(Texture2D source, int targetWidth, int targetHeight)
    {
        if (source == null)
        {
            Debug.LogError("Source texture is null. Cannot resize.");
            return null;
        }

        RenderTexture rt = RenderTexture.GetTemporary(targetWidth, targetHeight);
        RenderTexture.active = rt;

        Graphics.Blit(source, rt);

        Texture2D result = new Texture2D(targetWidth, targetHeight, source.format, false);
        result.ReadPixels(new Rect(0, 0, targetWidth, targetHeight), 0, 0);
        result.Apply();

        RenderTexture.active = null;
        RenderTexture.ReleaseTemporary(rt);

        return result;
    }

    public static byte[] PrepareVisualData(Texture2D inputTexture, int targetWidth = 0, int targetHeight = 0, bool useJpeg = false, int jpegQuality = 75)
    {
        Texture2D processedTexture = inputTexture;

        // resizing if both targetWidth and targetHeight are greater than zero
        if (targetWidth > 0 && targetHeight > 0 &&
            (inputTexture.width != targetWidth || inputTexture.height != targetHeight))
        {
            processedTexture = ResizeTexture(inputTexture, targetWidth, targetHeight);
        }

        // this converts the texture into a byte array (either a PNG or a JPEG)
        byte[] imageData = ConvertTextureToByteArray(processedTexture, useJpeg, jpegQuality);

        // if the processedTexture is a new texture (like if it's resized), it might be better to destory it for memory (decide after testing)
        if (processedTexture != inputTexture)
        {
            Object.Destroy(processedTexture);
        }

        return imageData;
    }
}
